[build-system]
requires = ["setuptools>=65.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dms-detection-suite"
version = "1.0.0"
description = "A comprehensive object detection pipeline with integrated authentication"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DMS Team", email = "team@dms-detection.com"}
]
maintainers = [
    {name = "DMS Team", email = "team@dms-detection.com"}
]
keywords = ["object-detection", "computer-vision", "machine-learning", "annotation", "training"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "cryptography>=41.0.0",
    "defusedxml>=0.7.1",
    "psutil>=5.9.0",
    "opencv-python>=4.6.0",
    "pillow>=9.0.0",
    "numpy>=1.21.0",
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "pathlib2>=2.3.0; python_version<'3.4'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
gpu = [
    "torch>=1.12.0",
    "torchvision>=0.13.0",
    "ultralytics>=8.0.0",
]
gui = [
    "PyQt5>=5.15.0",
]
all = [
    "dms-detection-suite[dev,gpu,gui]",
]

[project.scripts]
dms = "dms.cli:main"
dms-studio = "dms.studio:main"
dms-capture = "dms.capture:main"
dms-train = "dms.training:main"
dms-annotate = "dms.annotation:main"

[project.urls]
Homepage = "https://github.com/your-org/dms-detection-suite"
Documentation = "https://dms-detection-suite.readthedocs.io/"
Repository = "https://github.com/your-org/dms-detection-suite"
"Bug Tracker" = "https://github.com/your-org/dms-detection-suite/issues"
Changelog = "https://github.com/your-org/dms-detection-suite/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
dms = ["py.typed", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dms"]
skip_glob = ["*/__pycache__/*", "*/venv/*", "*/build/*", "*/dist/*"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "PIL.*",
    "ultralytics.*",
    "torch.*",
    "torchvision.*",
    "wmi.*",
    "win32security.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/dms",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "gui: marks tests that require GUI",
]

[tool.coverage.run]
source = ["src/dms"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 